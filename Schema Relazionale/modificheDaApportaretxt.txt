SI DEVE AGGIUNGERE LA SEQUENCE PER idTipologia
CONTROLLARE GLI ON DELETE CASCADE E UPDATE SULLA PARTE DI DESTRA



registrazione (che ora è ProgettoImpiegato):

trigger inserimentoProjectManager:
CREATE TRIGGER triggerinserimentoprojectmanager
    BEFORE INSERT
    ON public.registrazione
    FOR EACH ROW
    EXECUTE PROCEDURE public.ckregistrazione();

function ckregistrazione:

CREATE FUNCTION public.ckregistrazione()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN			   
		
		IF NEW.ruolo='Project Manager' THEN
		
			IF EXISTS (SELECT *
				   		   FROM Registrazione R
				   		   WHERE R.idProgetto = NEW.idProgetto
				   		   AND R.ruolo = 'Project Manager') THEN
				RAISE NOTICE 'questo utente non puo essere registrato a questo progetto perche questo progetto ha già un project manager';
				RETURN NULL;
			ELSE
				RETURN NEW;
			END IF;
		ELSE 
			IF NOT EXISTS (SELECT *
				   		   FROM Registrazione R
				   		   WHERE R.idProgetto = NEW.idProgetto
				   		   AND R.ruolo = 'Project Manager') THEN
				RAISE NOTICE 'questo utente non puo essere registrato a questo progetto perche questo progetto non ha ancora un project manager';
				RETURN NULL;
			ELSE
				RETURN NEW;
		END IF;
	END IF;	
	END
$BODY$;

ALTER FUNCTION public.ckregistrazione()
    OWNER TO postgres;





valutazione (ora divise in valutazioneProgettoImpiegato e valutazioneRiunioneImpiegato):
trigger datavalutazione

CREATE TRIGGER triggerdatavalutazione
    BEFORE INSERT
    ON public.valutazione
    FOR EACH ROW
    EXECUTE PROCEDURE public.inserimentodatacorrente();


function inserimentodatacorrente:

CREATE FUNCTION public.inserimentodatacorrente()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
	NEW.DataV = current_date;
	RETURN NEW;
END
$BODY$;

ALTER FUNCTION public.inserimentodatacorrente()
    OWNER TO postgres;



trigger inserimentorecensione

CREATE TRIGGER triggerinserimentorecensione
    BEFORE INSERT
    ON public.valutazione
    FOR EACH ROW
    EXECUTE PROCEDURE public.ckrecensione();


function ckrecensione:

CREATE FUNCTION public.ckrecensione()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN			
	IF EXISTS (SELECT *
			   FROM ProgettoRecensoreRecensito PRR1, ProgettoRecensoreRecensito PRR2
			   WHERE PRR1.Impiegato <> PRR2.Impiegato
			   AND PRR1.idProgetto = PRR2.idProgetto
			   AND PRR1.Impiegato = NEW.Recensore
			   AND PRR2.Impiegato = NEW.Recensito) THEN --recensore e recensito hanno lavorato allo stesso progetto
		IF NOT EXISTS (SELECT *
			   		   FROM ProgettoRecensoreRecensito PRR1, ProgettoRecensoreRecensito PRR2
			   		   WHERE PRR1.Impiegato <> PRR2.Impiegato
			   		   AND PRR1.idProgetto = PRR2.idProgetto
			   		   AND PRR1.Impiegato = NEW.Recensore
			   		   AND PRR2.Impiegato = NEW.Recensito
					   AND PRR1.Ruolo = 'Project Manager') THEN
			RAISE NOTICE 'questo recensore non può scrivere recensioni perché non è un project manager del progetto';
			RETURN NULL;
		ELSE
			RETURN NEW;
		END IF;
	ELSE
		IF NEW.Recensore = NEW.Recensito THEN
			   RAISE NOTICE 'Non puoi recensirti da solo';
		END IF;
		IF PRR1.idProgetto <> PRR2.idProgetto THEN
			   RAISE NOTICE 'Recensore e Recensito non hanno lavorato allo stesso progetto';
		END IF;
		RETURN NULL;
	END IF;
END
$BODY$;

ALTER FUNCTION public.ckrecensione()
    OWNER TO postgres;






VIEW:

CREATE OR REPLACE VIEW public.progettorecensorerecensito
 AS
 SELECT r.idprogetto,
    i.cf AS impiegato,
    r.ruolo
   FROM (impiegato i
     JOIN registrazione r ON (((i.cf)::text = (r.cf)::text)));

ALTER TABLE public.progettorecensorerecensito
    OWNER TO postgres;

